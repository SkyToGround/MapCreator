# -*- coding: utf-8 -*-"""Subclass of MapCreator, which is generated by wxFormBuilder."""import wximport MapCreatorFramefrom NKSReader import OpenNKS, GetVarsFromNKSFile, GetFileTimeDateStrfrom CreateMap import KMZFilefrom CreateMap import CreatePNGMapimport numpy as npimport sysimport Logimport time# Implementing MapCreatorclass MapCreatorMapCreator( MapCreatorFrame.MapCreator ):	def __init__( self, parent ):		MapCreatorFrame.MapCreator.__init__( self, parent )		self.current_in_file = None		self.additional_files = []		self.additional_files_labels = []		self.conf = wx.Config(appName="MapCreator", vendorName="LU")		self.pngCheckBox.SetValue(bool(self.conf.ReadInt("png", 0)))		self.kmzCheckBox.SetValue(bool(self.conf.ReadInt("kmz", 0)))				self.logScaleCheckBox.SetValue(bool(self.conf.ReadInt("logScale", 1)))				self.useMaxValCheckBox.SetValue(bool(self.conf.ReadInt("max", 0)))		self.maxValueTextField.SetValue(self.conf.Read("max_value", ""))				self.useMinValCheckBox.SetValue(bool(self.conf.ReadInt("min", 0)))		self.minValueTextField.SetValue(self.conf.Read("min_value", ""))				self.plotTitleTextCtrl.SetValue(self.conf.Read("title", ""))		self.varTextCtrl.SetValue(self.conf.Read("label", ""))		self.coordinateSystemChoice.SetSelection(self.conf.ReadInt("coordinate", 0))				self.bkgChoice.SetSelection(self.conf.ReadInt("bkgChoice", 0))				self.coordSysChoice.SetSelection(self.conf.ReadInt("outCoordSys", 0))				self.statsCheckBox.SetValue(bool(self.conf.ReadInt("stats", 0)))				self.bkgChoice.Delete(self.bkgChoice.GetCount() - 1)				self.OnCheckBoxPNG(None)		self.OnTitleEdit(None)				self.Bind(wx.EVT_CLOSE, self.OnCloseWindow, self)		def OnCloseWindow(self, event):		self.conf.WriteInt("png", int(self.pngCheckBox.IsChecked()))		self.conf.WriteInt("kmz", int(self.kmzCheckBox.IsChecked()))		self.conf.WriteInt("max", int(self.useMaxValCheckBox.IsChecked()))		self.conf.Write("max_value", self.maxValueTextField.GetValue())				self.conf.WriteInt("logScale", int(self.logScaleCheckBox.IsChecked()))		self.conf.WriteInt("stats", int(self.statsCheckBox.IsChecked()))				self.conf.WriteInt("min", int(self.useMinValCheckBox.IsChecked()))		self.conf.Write("min_value", self.minValueTextField.GetValue())				self.conf.Write("title", self.plotTitleTextCtrl.GetValue())		self.conf.Write("label", self.varTextCtrl.GetValue())		self.conf.WriteInt("coordinate", self.coordinateSystemChoice.GetSelection())				self.conf.WriteInt("outCoordSys", self.coordSysChoice.GetSelection())		self.conf.WriteInt("bkgChoice", self.bkgChoice.GetSelection())		self.Destroy()		def OnVariableChoice(self, event):		self.conf.WriteInt("varSel", self.variableChoice.GetSelection())			# Handlers for MapCreator events.	def OnPickInput( self, event ):		openDia = wx.FileDialog(self, u"Pick file to create maps from", style = wx.FD_OPEN, wildcard = "NKS files (*.NKS)|*.NKS|Comma separated files(*.csv)|*.csv;") #		#openDia = wx.FileDialog(self, u"Pick file to create maps from", style = wx.FD_OPEN, wildcard = "Comma separated fields (*.csv)|*.csv")		res = openDia.ShowModal()		if (res == wx.ID_OK):			self.current_in_file = openDia.GetPath()			use_name = self.current_in_file[self.current_in_file.rfind("/") + 1:]			self.inputLabel.SetLabel(use_name)			if (len(self.plotTitleTextCtrl.GetValue()) > 0):				self.createMapButton.Enable()				self.createNKSButton.Enable()			else:				self.createMapButton.Enable(False)				self.createNKSButton.Enable(False)			self.removeFileButton.Enable()			self.addButton.Enable()			self.variableChoice.Enable()			variables = GetVarsFromNKSFile(self.current_in_file)			self.variableChoice.Clear()			for i in range(len(variables)):				self.variableChoice.Append(variables[i])			last_var_sel = self.conf.ReadInt("varSel", 0)			#self.variableChoice.Append("Points only")			if (len(variables) > last_var_sel):				self.variableChoice.SetSelection(last_var_sel)			elif (len(variables) == 0):				pass			else:				self.variableChoice.SetSelection(len(variables) - 1)		else:			self.current_in_file = None			self.inputLabel.SetLabel("No file")			self.createMapButton.Enable(False)			self.createNKSButton.Enable(False)			self.removeFileButton.Enable(False)			self.addButton.Enable(False)			self.variableChoice.Enable(False)		def OnAddFile(self, event):		openDia = wx.FileDialog(self, u"Pick file to create maps from", style = wx.FD_OPEN|wx.FD_MULTIPLE, wildcard = "(*.NKS)|*.NKS")		res = openDia.ShowModal()		if (res == wx.ID_OK):			additional_files = openDia.GetPaths()			for new_fl in additional_files:				use_name = new_fl[new_fl.rfind("/") + 1:]				self.additional_files_labels.append(use_name)				self.additional_files.append(openDia.GetPath())				self.additionalFilesListCtrl.InsertStringItem(sys.maxint, use_name)		def OnRemoveFile(self, event):		index = -1		while (True):			index = self.additionalFilesListCtrl.GetNextItem(index, wx.LIST_NEXT_ALL, wx.LIST_STATE_SELECTED)			if (index == -1):				break			else:				self.additionalFilesListCtrl.DeleteItem(index)				self.additional_files.pop(index)				self.additional_files_labels.pop(index)				break		def OnCheckBoxPNG(self, event):		new_value = self.pngCheckBox.IsChecked()		self.bkgChoice.Enable(new_value)		self.coordSysChoice.Enable(new_value)		self.statsCheckBox.Enable(new_value)		#self.previwButton.Enable(False)		self.OnCoordinateSystem(None)		def OnCoordinateSystem(self, event):		pass		def OnCreateNKS(self, event):		if (self.current_in_file == None or len(self.plotTitleTextCtrl.GetValue()) == 0):			return		saveDia = wx.FileDialog(self, u"Pick a file name to save the map to", style = wx.FD_SAVE, defaultFile = self.plotTitleTextCtrl.GetValue())		res = saveDia.ShowModal()		if (res != wx.ID_OK):			return				save_path = saveDia.GetPath()		if (save_path[-3:] != "NKS"):			save_path += ".NKS"				files_to_read = [self.current_in_file, ]		for fl in self.additional_files:			files_to_read.append(fl)		target_file = open(save_path, "wb")		for fl in files_to_read:			c_in_file = open(fl)			in_lines = c_in_file.readlines()			c_in_file.close()			for i in range(1, len(in_lines)):				target_file.write(in_lines[i])		target_file.close()		def OnTitleEdit(self, event):		if (len(self.plotTitleTextCtrl.GetValue()) > 0 and self.current_in_file != None):			self.createMapButton.Enable(True)			self.createNKSButton.Enable(True)		else:			self.createMapButton.Enable(False)			self.createNKSButton.Enable(False)		def OnCreateMaps( self, event ):		stat_string = "Map date: %s. " % time.strftime("%a %b %d, %Y", time.localtime())		backgrounds = ["White", "LM City", "LM Terrain", "LM Road", "LM Sweden", "OSM"]		coordinate_systems = ["WGS84", "RT90", "UTM"]		outCoordSys = coordinate_systems[self.coordSysChoice.GetSelection()]		bkg = backgrounds[self.bkgChoice.GetSelection()]		if (self.current_in_file == None or len(self.plotTitleTextCtrl.GetValue()) == 0):			return		#suggest_name = self.current_in_file[self.current_in_file.rfind("/") + 1: - 4]		suggest_name = self.plotTitleTextCtrl.GetValue()		saveDia = wx.FileDialog(self, u"Pick a file name to save the map to", style = wx.FD_SAVE, defaultFile = suggest_name)		res = saveDia.ShowModal()		if (res != wx.ID_OK):			return				save_file = saveDia.GetPath()				Log.info("MapCreatorMapCreator::OnCreateMaps(): Creating maps.")		rt90 = False		if (self.coordinateSystemChoice.GetSelection() == 0):			rt90 = True		lat, lon, value = OpenNKS(self.current_in_file, var_name = self.variableChoice.GetString(self.variableChoice.GetSelection()), rt90 = rt90)		stat_string += GetFileTimeDateStr(self.current_in_file)				for fl in self.additional_files:			lat_n, lon_n, value_n = OpenNKS(fl, var_name = self.variableChoice.GetString(self.variableChoice.GetSelection()), rt90 = rt90)			lat = np.concatenate([lat, lat_n])			lon = np.concatenate([lon, lon_n])			value = np.concatenate([value, value_n])			stat_string += ", " + GetFileTimeDateStr(fl)		value_desc = self.variableChoice.GetString(self.variableChoice.GetSelection())		plot_title = self.plotTitleTextCtrl.GetValue()		if (len(self.varTextCtrl.GetValue()) != 0):			value_desc = self.varTextCtrl.GetValue()		max_value = None		if (self.useMaxValCheckBox.IsChecked()):			try:				max_value = float(self.maxValueTextField.GetValue())			except ValueError, e:				Log.error("MapCreatorMapCreator::OnCreateMaps(): Can not convert value in max-field to float.")				return				min_value = None		if (self.useMinValCheckBox.IsChecked()):			try:				min_value = float(self.minValueTextField.GetValue())			except ValueError, e:				Log.error("MapCreatorMapCreator::OnCreateMaps(): Can not convert value in min-field to float.")				return				if (min_value != None and max_value != None):			if (min_value >= max_value):				Log.error("MapCreatorMapCreator::OnCreateMaps(): Min value can not be larger than max value.")				return				if (not self.statsCheckBox.IsChecked()):			stat_string = None				if (self.kmzCheckBox.IsChecked()):			kmz_fn = self.current_in_file[0:self.current_in_file.rfind(".")]			gEarth_file = KMZFile(save_file)			gEarth_file.log_scale = self.logScaleCheckBox.IsChecked()			gEarth_file.addPointPlot(lon = lon, lat = lat, value = value, title = plot_title, label = value_desc, max_value = max_value, min_value = min_value)			gEarth_file.addNativePointPlot(lon = lon, lat = lat, value = value, title = plot_title, label = value_desc, max_value = max_value, min_value = min_value)			gEarth_file.save()				if (self.pngCheckBox.IsChecked()):			#png_file_name = self.current_in_file[0:self.current_in_file.rfind(".")]			CreatePNGMap(lon = lon, lat = lat, value = value, title = plot_title, label = value_desc, min_value = min_value, max_value = max_value, file_name = save_file, outCoordSys = outCoordSys, bkg = bkg, log_scale = self.logScaleCheckBox.IsChecked(), stats = stat_string)				self.plotTitleTextCtrl.SetValue("")				Log.info("MapCreatorMapCreator::OnCreateMaps(): Maps are done.")